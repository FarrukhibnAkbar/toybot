// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: sales.sql

package db

import (
	"context"
)

const addSale = `-- name: AddSale :one
INSERT INTO sales (product_id, qty, sell_price, created_by)
VALUES ($1, $2, $3, $4)
RETURNING id, product_id, qty, sell_price, total_revenue, created_by, created_at
`

type AddSaleParams struct {
	ProductID int32   `json:"product_id"`
	Qty       float64 `json:"qty"`
	SellPrice float64 `json:"sell_price"`
	CreatedBy int32   `json:"created_by"`
}

func (q *Queries) AddSale(ctx context.Context, arg AddSaleParams) (Sale, error) {
	row := q.db.QueryRow(ctx, addSale,
		arg.ProductID,
		arg.Qty,
		arg.SellPrice,
		arg.CreatedBy,
	)
	var i Sale
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Qty,
		&i.SellPrice,
		&i.TotalRevenue,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const reduceStock = `-- name: ReduceStock :exec
UPDATE stock_levels
SET qty = qty - $2, updated_at = now()
WHERE product_id = $1 AND qty >= $2
`

type ReduceStockParams struct {
	ProductID int32   `json:"product_id"`
	Qty       float64 `json:"qty"`
}

func (q *Queries) ReduceStock(ctx context.Context, arg ReduceStockParams) error {
	_, err := q.db.Exec(ctx, reduceStock, arg.ProductID, arg.Qty)
	return err
}
