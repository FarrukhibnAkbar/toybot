// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: products.sql

package db

import (
	"context"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (name, sell_price)
VALUES ($1, $2)
RETURNING id, name, sell_price, created_at
`

type CreateProductParams struct {
	Name      string  `json:"name"`
	SellPrice float64 `json:"sell_price"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct, arg.Name, arg.SellPrice)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SellPrice,
		&i.CreatedAt,
	)
	return i, err
}

const getProductByName = `-- name: GetProductByName :one
SELECT id, name, sell_price, created_at FROM products WHERE name = $1
`

func (q *Queries) GetProductByName(ctx context.Context, name string) (Product, error) {
	row := q.db.QueryRow(ctx, getProductByName, name)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SellPrice,
		&i.CreatedAt,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT p.id, p.name, s.qty, s.cost_price, p.sell_price
FROM products p
LEFT JOIN stock_levels s ON s.product_id = p.id
ORDER BY p.name
`

type ListProductsRow struct {
	ID        int32   `json:"id"`
	Name      string  `json:"name"`
	Qty       float64 `json:"qty"`
	CostPrice float64 `json:"cost_price"`
	SellPrice float64 `json:"sell_price"`
}

func (q *Queries) ListProducts(ctx context.Context) ([]ListProductsRow, error) {
	rows, err := q.db.Query(ctx, listProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListProductsRow
	for rows.Next() {
		var i ListProductsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Qty,
			&i.CostPrice,
			&i.SellPrice,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertStock = `-- name: UpsertStock :exec
INSERT INTO stock_levels (product_id, qty, cost_price)
VALUES ($1, $2, $3)
ON CONFLICT (product_id)
DO UPDATE SET
    qty = stock_levels.qty + EXCLUDED.qty,
    cost_price = EXCLUDED.cost_price,
    updated_at = now()
`

type UpsertStockParams struct {
	ProductID int32   `json:"product_id"`
	Qty       float64 `json:"qty"`
	CostPrice float64 `json:"cost_price"`
}

func (q *Queries) UpsertStock(ctx context.Context, arg UpsertStockParams) error {
	_, err := q.db.Exec(ctx, upsertStock, arg.ProductID, arg.Qty, arg.CostPrice)
	return err
}
